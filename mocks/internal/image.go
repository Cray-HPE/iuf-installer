// Code generated by MockGen. DO NOT EDIT.
// Source: image.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockImageService is a mock of ImageService interface.
type MockImageService struct {
	ctrl     *gomock.Controller
	recorder *MockImageServiceMockRecorder
}

// MockImageServiceMockRecorder is the mock recorder for MockImageService.
type MockImageServiceMockRecorder struct {
	mock *MockImageService
}

// NewMockImageService creates a new mock instance.
func NewMockImageService(ctrl *gomock.Controller) *MockImageService {
	mock := &MockImageService{ctrl: ctrl}
	mock.recorder = &MockImageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageService) EXPECT() *MockImageServiceMockRecorder {
	return m.recorder
}

// LoadImages mocks base method.
func (m *MockImageService) LoadImages() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadImages")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadImages indicates an expected call of LoadImages.
func (mr *MockImageServiceMockRecorder) LoadImages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadImages", reflect.TypeOf((*MockImageService)(nil).LoadImages))
}

// getImageNamesFromTarball mocks base method.
func (m *MockImageService) getImageNamesFromTarball() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getImageNamesFromTarball")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getImageNamesFromTarball indicates an expected call of getImageNamesFromTarball.
func (mr *MockImageServiceMockRecorder) getImageNamesFromTarball() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getImageNamesFromTarball", reflect.TypeOf((*MockImageService)(nil).getImageNamesFromTarball))
}
