// Code generated by MockGen. DO NOT EDIT.
// Source: podman.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPodmanService is a mock of PodmanService interface.
type MockPodmanService struct {
	ctrl     *gomock.Controller
	recorder *MockPodmanServiceMockRecorder
}

// MockPodmanServiceMockRecorder is the mock recorder for MockPodmanService.
type MockPodmanServiceMockRecorder struct {
	mock *MockPodmanService
}

// NewMockPodmanService creates a new mock instance.
func NewMockPodmanService(ctrl *gomock.Controller) *MockPodmanService {
	mock := &MockPodmanService{ctrl: ctrl}
	mock.recorder = &MockPodmanServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodmanService) EXPECT() *MockPodmanServiceMockRecorder {
	return m.recorder
}

// PodmanInit mocks base method.
func (m *MockPodmanService) PodmanInit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodmanInit")
	ret0, _ := ret[0].(error)
	return ret0
}

// PodmanInit indicates an expected call of PodmanInit.
func (mr *MockPodmanServiceMockRecorder) PodmanInit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodmanInit", reflect.TypeOf((*MockPodmanService)(nil).PodmanInit))
}

// isSocketServiceRunning mocks base method.
func (m *MockPodmanService) isSocketServiceRunning() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isSocketServiceRunning")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// isSocketServiceRunning indicates an expected call of isSocketServiceRunning.
func (mr *MockPodmanServiceMockRecorder) isSocketServiceRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isSocketServiceRunning", reflect.TypeOf((*MockPodmanService)(nil).isSocketServiceRunning))
}

// startSocketService mocks base method.
func (m *MockPodmanService) startSocketService() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "startSocketService")
	ret0, _ := ret[0].(error)
	return ret0
}

// startSocketService indicates an expected call of startSocketService.
func (mr *MockPodmanServiceMockRecorder) startSocketService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "startSocketService", reflect.TypeOf((*MockPodmanService)(nil).startSocketService))
}
